import { NextRequest, NextResponse } from "next/server"

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const CHAT_ID = process.env.TELEGRAM_CHAT_ID

interface ContactData {
  name: string
  phone?: string
  email?: string
  message?: string
  selected: "contact" | "question" | "availability" | "partnership" | "contact_form" | "partnership_detailed"
  company?: string
  city?: string
}

const actionLabels = {
  contact: "–°–≤—è–∑–∞—Ç—å—Å—è",
  question: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", 
  availability: "–°–ø—Ä–æ—Å–∏—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
  partnership: "–£–∑–Ω–∞—Ç—å –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ",
  contact_form: "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞",
  partnership_detailed: "–î–µ—Ç–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ"
}

export async function POST(request: NextRequest) {
  try {
    const data: ContactData = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!data.name || !data.selected) {
      return NextResponse.json(
        { error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" },
        { status: 400 }
      )
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if ((data.selected === "contact_form" || data.selected === "partnership_detailed") && (!data.email || !data.message)) {
      return NextResponse.json(
        { error: "Email –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏" },
        { status: 400 }
      )
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let message = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ EcoYurt</b>

üë§ <b>–ò–º—è:</b> ${data.name}
${data.phone ? `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}` : ''}
${data.email ? `üìß <b>Email:</b> ${data.email}` : ''}
üéØ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> ${actionLabels[data.selected]}
${data.message ? `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${data.message}` : ''}
${data.company ? `üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${data.company}` : ''}
${data.city ? `üåç <b>–ì–æ—Ä–æ–¥/—Ä–µ–≥–∏–æ–Ω:</b> ${data.city}` : ''}

‚è∞ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU', { 
  timeZone: 'Asia/Tashkent',
  year: 'numeric',
  month: 'long', 
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
})}
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: "HTML"
        })
      }
    )

    if (!telegramResponse.ok) {
      const error = await telegramResponse.text()
      console.error("Telegram API error:", error)
      throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
    }

    return NextResponse.json({ 
      success: true, 
      message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" 
    })

  } catch (error) {
    console.error("Contact API error:", error)
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    )
  }
}
